---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: ${GROUP_NAME}-network-security-policy
metadata:
  name: ${GROUP_NAME}-network-security-policy
objects:
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: ${GROUP_NAME}-deny-by-default
      labels:
        app: ${GROUP_NAME}
    spec:
      # The default posture for a security first namespace is to
      # deny all traffic. If not added this rule will be added
      # by Platform Services during environment cut-over.
      podSelector: {}
      ingress: []
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-from-openshift-ingress
      labels:
        app: ${GROUP_NAME}
    spec:
      # This policy allows any pod with a route & service combination
      # to accept traffic from the OpenShift router pods. This is
      # required for things outside of OpenShift (like the Internet)
      # to reach your pods.
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  network.openshift.io/policy-group: ingress
      podSelector: {}
      policyTypes:
        - Ingress
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-services-to-database
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow services to connect to the database
      podSelector:
        matchLabels:
          role: database-${GROUP_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: api-${GROUP_NAME}
            - podSelector:
                matchLabels:
                  role: backup-${GROUP_NAME}
            - podSelector:
                matchLabels:
                  role: metabase-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 27017
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-services-to-postgres
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow services to connect to postgres
      podSelector:
        matchLabels:
          role: metabase-postgres-${GROUP_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: metabase-${GROUP_NAME}
            - podSelector:
                matchLabels:
                  role: backup-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 5432
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-frontend-to-api
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow frontends to connect to API
      podSelector:
        matchLabels:
          role: api-${GROUP_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: frontend-public-${GROUP_NAME}
            - podSelector:
                matchLabels:
                  role: frontend-admin-${GROUP_NAME}
            - podSelector:
                matchLabels:
                  role: rproxy-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 3000
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-api-to-clamav
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow API to connect to clamav
      podSelector:
        matchLabels:
          role: clamav
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: api-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 3310
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-proxy-to-public-frontend
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow proxy to connect to the public frontend
      podSelector:
        matchLabels:
          role: frontend-public-${GROUP_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: rproxy-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 8080 # Angular apps port
  - apiVersion: networking.k8s.io/v1
    kind: NetworkPolicy
    metadata:
      name: ${GROUP_NAME}-allow-proxy-to-admin-frontend
      labels:
        app: ${GROUP_NAME}
    spec:
      # Allow proxy to connect to the public frontend
      podSelector:
        matchLabels:
          role: frontend-admin-${GROUP_NAME}
      ingress:
        - from:
            - podSelector:
                matchLabels:
                  role: rproxy-${GROUP_NAME}
          ports:
            - protocol: TCP
              port: 8080 # Angular apps port
parameters:
  - description: A name used to group objects together to identify related objects for a set of deployments
    displayName: Group name
    name: GROUP_NAME
    required: true
    value: eagle-epic